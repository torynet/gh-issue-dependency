name: Beta

on:
  push:
    tags:
      - 'v*-rc*'  # Only RC tags
  workflow_dispatch:
    inputs:
      tag:
        description: 'RC tag to deploy (e.g., v1.2.0-rc1)'
        required: true

permissions:
  contents: read
  packages: write

jobs:
  beta-deploy:
    name: Deploy Beta Release
    runs-on: ubuntu-latest
    environment: 
      name: beta
      url: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}
    outputs:
      rc_tag: ${{ steps.version.outputs.version }}
      release_tag: ${{ steps.release_version.outputs.release_tag }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Validate RC tag
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-rc[0-9]+$ ]]; then
            echo "‚ùå Invalid RC tag format: $VERSION"
            echo "Expected format: v1.2.3-rc1"
            exit 1
          fi
          echo "‚úÖ Valid RC tag: $VERSION"

      - name: Calculate release version
        id: release_version
        run: |
          RC_TAG="${{ steps.version.outputs.version }}"
          # Convert RC tag to release tag (v1.2.0-rc1 -> v1.2.0)
          RELEASE_TAG=${RC_TAG%-rc*}
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "üìã RC: $RC_TAG ‚Üí Release: $RELEASE_TAG"

      - name: Run tests
        run: go test -v -race ./...

      - name: Build beta binaries
        run: |
          mkdir -p dist
          
          # Build for multiple platforms
          PLATFORMS="linux/amd64 linux/arm64 darwin/amd64 darwin/arm64 windows/amd64"
          
          for platform in $PLATFORMS; do
            GOOS=${platform%/*}
            GOARCH=${platform#*/}
            
            EXT=""
            if [ "$GOOS" = "windows" ]; then
              EXT=".exe"
            fi
            
            BINARY_NAME="gh-issue-dependency-${{ steps.version.outputs.version }}-${GOOS}-${GOARCH}${EXT}"
            
            echo "Building $BINARY_NAME..."
            GOOS=$GOOS GOARCH=$GOARCH CGO_ENABLED=0 go build \
              -ldflags "-s -w -X cmd.Version=${{ steps.version.outputs.version }} -X cmd.Commit=${GITHUB_SHA:0:8} -X cmd.BuildType=beta" \
              -o "dist/${BINARY_NAME}" \
              .
            
            # Create checksums
            cd dist
            sha256sum "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
            cd ..
          done

      - name: Create beta release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Beta Release ${{ steps.version.outputs.version }}
          body: |
            ## üß™ Beta Release
            
            This is a beta release for testing purposes. 
            
            **‚ö†Ô∏è Not recommended for production use.**
            
            ### Installation
            Download the appropriate binary for your platform and add it to your PATH.
            
            ### Testing
            Please test this beta version and report any issues.
            
            **Commit**: ${{ github.sha }}
            **Built**: ${{ github.run_id }}
          draft: false
          prerelease: true
          files: |
            dist/*
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify beta deployment
        run: |
          echo "üß™ Beta deployment completed!"
          echo "RC Version: ${{ steps.version.outputs.version }}"
          echo "Target Release: ${{ steps.release_version.outputs.release_tag }}"
          echo "Download: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"
          echo ""
          echo "üî¨ Test this beta release thoroughly"
          echo "‚úÖ If ready for production, approve the next step to create release tag"

  # Manual approval gate to promote RC to production release
  promote-to-release:
    name: Promote RC to Release
    needs: beta-deploy
    runs-on: ubuntu-latest
    environment:
      name: beta-approval
      url: https://github.com/${{ github.repository }}/releases/tag/${{ needs.beta-deploy.outputs.release_tag }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Create production release tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          RC_TAG="${{ needs.beta-deploy.outputs.rc_tag }}"
          RELEASE_TAG="${{ needs.beta-deploy.outputs.release_tag }}"
          
          # Get the commit that the RC tag points to
          RC_COMMIT=$(git rev-list -n 1 "$RC_TAG")
          
          echo "üè∑Ô∏è Creating release tag: $RELEASE_TAG from RC: $RC_TAG"
          echo "üìç Commit: $RC_COMMIT"
          
          git tag -a "$RELEASE_TAG" $RC_COMMIT -m "Release $RELEASE_TAG (promoted from $RC_TAG)"
          git push origin "$RELEASE_TAG"
          
          echo "‚úÖ Created production release tag: $RELEASE_TAG"
          echo "üöÄ Release workflow will now deploy this to production"