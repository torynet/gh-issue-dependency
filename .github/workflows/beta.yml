name: Beta

on:
  push:
    branches: 
      - main
      - 'hotfix/**'
  workflow_dispatch:
    inputs:
      force_rc:
        description: 'Force RC creation even if tests fail'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write

jobs:
  test-and-validate:
    name: Test and Validate
    runs-on: ubuntu-latest
    outputs:
      should_create_rc: ${{ steps.semantic-release.outputs.should_release }}
      rc_tag: ${{ steps.rc-tag.outputs.rc_tag }}
      new_version: ${{ steps.semantic-release.outputs.new_version }}
      release_type: ${{ steps.semantic-release.outputs.release_type }}
      rc_number: ${{ steps.rc-tag.outputs.rc_number }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-1.21-${{ hashFiles('**/go.sum') }}

      - name: Run tests
        run: |
          echo "üß™ Running unit tests..."
          go test -v -race ./...

      - name: Run linting
        run: |
          echo "üîç Running linting..."
          # Install golangci-lint if not available
          if ! command -v golangci-lint &> /dev/null; then
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
          fi
          golangci-lint run

      - name: Run integration tests
        run: |
          echo "üîÑ Running integration tests..."
          if [ -f "./tests/integration_test.sh" ]; then
            chmod +x ./tests/integration_test.sh
            ./tests/integration_test.sh
          else
            echo "‚ÑπÔ∏è No integration tests found"
          fi

      - name: Setup Node.js for semantic-release
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install semantic-release dependencies
        run: npm ci

      - name: Analyze conventional commit with semantic-release
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Run semantic-release in dry-run mode to analyze commits
          npx semantic-release --dry-run --no-ci > semantic-release-output.txt 2>&1 || true
          
          # Extract information from semantic-release output
          if grep -q "The next release version is" semantic-release-output.txt; then
            # semantic-release determined a new version should be created
            NEW_VERSION=$(grep "The next release version is" semantic-release-output.txt | sed -E 's/.*The next release version is ([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
            RELEASE_TYPE=$(grep "Analysis of .* commits complete: " semantic-release-output.txt | sed -E 's/.*Analysis of .* commits complete: ([a-z]+) release/\1/' || echo "patch")
            SHOULD_RELEASE="true"
            
            echo "‚úÖ semantic-release analysis: $NEW_VERSION ($RELEASE_TYPE release)"
          else
            # No release needed
            SHOULD_RELEASE="false"
            NEW_VERSION=""
            RELEASE_TYPE=""
            
            echo "‚ÑπÔ∏è semantic-release analysis: No release needed"
          fi
          
          # Override if force_rc is set
          if [ "${{ github.event.inputs.force_rc }}" = "true" ]; then
            SHOULD_RELEASE="true"
            if [ -z "$NEW_VERSION" ]; then
              # Get latest release for forced RC
              LATEST_RELEASE=$(git tag -l "v*" | grep -v "rc" | sort -V | tail -1 || echo "v0.0.0")
              BASE_VERSION=${LATEST_RELEASE#v}
              IFS='.' read -r -a VERSION_PARTS <<< "$BASE_VERSION"
              MAJOR=${VERSION_PARTS[0]}
              MINOR=${VERSION_PARTS[1]:-0}
              PATCH=$((${VERSION_PARTS[2]:-0} + 1))
              NEW_VERSION="$MAJOR.$MINOR.$PATCH"
              RELEASE_TYPE="patch"
            fi
            echo "üöÄ Force RC creation enabled: $NEW_VERSION"
          fi
          
          echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          
          # Show semantic-release output for debugging
          echo "üìã semantic-release output:"
          cat semantic-release-output.txt
          rm semantic-release-output.txt

      - name: Calculate RC tag
        if: steps.semantic-release.outputs.should_release == 'true'
        id: rc-tag
        run: |
          NEW_VERSION="${{ steps.semantic-release.outputs.new_version }}"
          
          # Find next RC number for this target version
          EXISTING_RCS=$(git tag -l "v${NEW_VERSION}-rc*" | sort -V)
          if [ -z "$EXISTING_RCS" ]; then
            RC_NUMBER=1
          else
            # Get the highest RC number for this target version
            HIGHEST_RC=$(echo "$EXISTING_RCS" | tail -1)
            # Extract RC number (e.g., v1.2.3-rc4 -> 4)
            RC_NUMBER=$(echo "$HIGHEST_RC" | sed 's/.*-rc//')
            RC_NUMBER=$((RC_NUMBER + 1))
          fi
          
          RC_TAG="v${NEW_VERSION}-rc${RC_NUMBER}"
          
          echo "rc_tag=$RC_TAG" >> $GITHUB_OUTPUT
          echo "rc_number=$RC_NUMBER" >> $GITHUB_OUTPUT
          
          echo "üèóÔ∏è Target version: $NEW_VERSION (semantic-release: ${{ steps.semantic-release.outputs.release_type }})"
          echo "üî¢ RC tag: $RC_TAG"

  create-rc-tag:
    name: Create RC Tag
    needs: test-and-validate
    if: needs.test-and-validate.outputs.should_create_rc == 'true'
    runs-on: ubuntu-latest
    outputs:
      rc_tag: ${{ needs.test-and-validate.outputs.rc_tag }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create RC Tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          RC_TAG="${{ needs.test-and-validate.outputs.rc_tag }}"
          
          git tag -a "$RC_TAG" -m "Release Candidate $RC_TAG"
          git push origin "$RC_TAG"
          
          echo "üöÄ Created RC tag: $RC_TAG"
          echo "üìã This will trigger the RC workflow to build artifacts and create pre-release"

  notify-completion:
    name: Notify Completion
    needs: [test-and-validate, create-rc-tag]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Notify Results
        run: |
          if [ "${{ needs.test-and-validate.result }}" = "failure" ]; then
            echo "‚ùå Tests failed - no RC will be created"
            exit 1
          elif [ "${{ needs.test-and-validate.outputs.should_create_rc }}" = "true" ]; then
            if [ "${{ needs.create-rc-tag.result }}" = "success" ]; then
              echo "‚úÖ All tests passed and RC tag created: ${{ needs.test-and-validate.outputs.rc_tag }}"
              echo "üîÑ RC workflow will now build artifacts and create pre-release"
            else
              echo "‚ùå Tests passed but RC tag creation failed"
              exit 1
            fi
          else
            echo "‚úÖ All tests passed but commit does not trigger release"
            echo "‚ÑπÔ∏è semantic-release: No version bump needed"
          fi

