name: Release

on:
  release:
    types: [released]  # Triggered when pre-release is promoted to release
  workflow_dispatch:
    inputs:
      rc_tag:
        description: 'RC tag to promote to release (e.g., v1.2.0-rc1)'
        required: true

permissions:
  contents: write
  packages: write

jobs:
  promote-to-release:
    name: Promote RC to Production Release
    runs-on: ubuntu-latest
    environment: 
      name: release
      url: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.release_tag }}
    outputs:
      rc_tag: ${{ steps.version.outputs.rc_tag }}
      release_tag: ${{ steps.version.outputs.release_tag }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version information
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            RC_TAG="${{ github.event.inputs.rc_tag }}"
            
            # Validate RC tag format
            if [[ ! "$RC_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-rc[0-9]+$ ]]; then
              echo "‚ùå Invalid RC tag format: $RC_TAG"
              echo "Expected format: v1.2.3-rc1"
              exit 1
            fi
            
          else
            # Release event - extract RC tag from the promoted release
            PROMOTED_TAG="${{ github.event.release.tag_name }}"
            
            # Check if this is an RC tag being promoted
            if [[ "$PROMOTED_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-rc[0-9]+$ ]]; then
              RC_TAG="$PROMOTED_TAG"
            else
              echo "‚ùå Release promotion workflow should only handle RC tags, got: $PROMOTED_TAG"
              exit 1
            fi
          fi
          
          # Convert RC tag to release tag (v1.2.0-rc1 -> v1.2.0)
          RELEASE_TAG=${RC_TAG%-rc*}
          
          echo "rc_tag=$RC_TAG" >> $GITHUB_OUTPUT
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          
          echo "üè∑Ô∏è Promoting RC: $RC_TAG ‚Üí Release: $RELEASE_TAG"

      - name: Verify RC tag exists
        run: |
          RC_TAG="${{ steps.version.outputs.rc_tag }}"
          
          # Check if RC tag exists
          if ! git rev-parse "refs/tags/$RC_TAG" >/dev/null 2>&1; then
            echo "‚ùå RC tag does not exist: $RC_TAG"
            echo "Available tags:"
            git tag -l "v*-rc*" | tail -10
            exit 1
          fi
          
          echo "‚úÖ RC tag exists: $RC_TAG"

      - name: Create production release tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          RC_TAG="${{ steps.version.outputs.rc_tag }}"
          RELEASE_TAG="${{ steps.version.outputs.release_tag }}"
          
          # Get the commit that the RC tag points to
          RC_COMMIT=$(git rev-list -n 1 "refs/tags/$RC_TAG")
          
          echo "üè∑Ô∏è Creating release tag: $RELEASE_TAG from RC: $RC_TAG"
          echo "üìç Commit: $RC_COMMIT"
          
          # Check if release tag already exists
          if git rev-parse "refs/tags/$RELEASE_TAG" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Release tag already exists: $RELEASE_TAG"
            EXISTING_COMMIT=$(git rev-list -n 1 "refs/tags/$RELEASE_TAG")
            if [ "$RC_COMMIT" = "$EXISTING_COMMIT" ]; then
              echo "‚úÖ Release tag points to same commit as RC tag"
            else
              echo "‚ùå Release tag points to different commit than RC tag"
              echo "RC commit: $RC_COMMIT"
              echo "Release commit: $EXISTING_COMMIT"
              exit 1
            fi
          else
            # Create new release tag
            git tag -a "$RELEASE_TAG" "$RC_COMMIT" -m "Release $RELEASE_TAG (promoted from $RC_TAG)"
            git push origin "$RELEASE_TAG"
            echo "‚úÖ Created production release tag: $RELEASE_TAG"
          fi

  build-production:
    name: Build Production Release
    needs: promote-to-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: 386
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: 386

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.promote-to-release.outputs.release_tag }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-1.21-${{ hashFiles('**/go.sum') }}

      - name: Build production binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          EXT=""
          if [ "${{ matrix.goos }}" = "windows" ]; then
            EXT=".exe"
          fi
          
          # Use proper GitHub CLI extension naming (without version number)
          BINARY_NAME="gh-issue-dependency-${{ matrix.goos }}-${{ matrix.goarch }}${EXT}"
          
          echo "Building production $BINARY_NAME for release ${{ needs.promote-to-release.outputs.release_tag }}..."
          go build \
            -ldflags "-s -w -X cmd.Version=${{ needs.promote-to-release.outputs.release_tag }} -X cmd.Commit=${GITHUB_SHA:0:8} -X cmd.BuildType=release" \
            -o "dist/${BINARY_NAME}" \
            .
          
          # Create checksums
          cd dist
          sha256sum "${BINARY_NAME}" > "${BINARY_NAME}.sha256"

      - name: Upload production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/

  create-production-release:
    name: Create Production Release
    needs: [promote-to-release, build-production]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.promote-to-release.outputs.release_tag }}
          fetch-depth: 0

      - name: Download all production artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
          pattern: production-binaries-*
          merge-multiple: true

      - name: Generate production changelog
        id: changelog
        run: |
          RELEASE_TAG="${{ needs.promote-to-release.outputs.release_tag }}"
          RC_TAG="${{ needs.promote-to-release.outputs.rc_tag }}"
          
          # Generate changelog from commits since last release
          LATEST_RELEASE=$(git tag -l "v*" | grep -v "rc" | sort -V | grep -v "^$RELEASE_TAG$" | tail -1)
          if [ -z "$LATEST_RELEASE" ]; then
            echo "## Changes" > release_notes.md
            echo "- Initial production release" >> release_notes.md
          else
            echo "## Changes since $LATEST_RELEASE" > release_notes.md
            git log --pretty=format:"- %s (%h)" ${LATEST_RELEASE}..HEAD >> release_notes.md
          fi
          
          # Add production release info
          echo "" >> release_notes.md
          echo "## üöÄ Production Release" >> release_notes.md
          echo "" >> release_notes.md
          echo "This is a **production release** promoted from release candidate \`$RC_TAG\`." >> release_notes.md
          echo "" >> release_notes.md
          echo "### GitHub CLI Extension Installation" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "# Install or upgrade to latest stable version" >> release_notes.md
          echo "gh extension install torynet/gh-issue-dependency" >> release_notes.md
          echo "# or upgrade if already installed" >> release_notes.md
          echo "gh extension upgrade torynet/gh-issue-dependency" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "**Promoted from**: $RC_TAG" >> release_notes.md
          echo "**Commit**: ${{ github.sha }}" >> release_notes.md
          echo "**Build**: ${{ github.run_id }}" >> release_notes.md

      - name: Create Production Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.promote-to-release.outputs.release_tag }}
          name: Release ${{ needs.promote-to-release.outputs.release_tag }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            dist/*
          token: ${{ secrets.GITHUB_TOKEN }}

  notify-production-release:
    name: Notify Production Release
    needs: [promote-to-release, create-production-release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify release completion
        if: needs.create-production-release.result == 'success'
        run: |
          echo "üöÄ Production release ${{ needs.promote-to-release.outputs.release_tag }} completed successfully!"
          echo "üì¶ Release available at: https://github.com/${{ github.repository }}/releases/tag/${{ needs.promote-to-release.outputs.release_tag }}"
          echo ""
          echo "üîß GitHub CLI Extension Installation:"
          echo "gh extension install torynet/gh-issue-dependency"
          echo "gh extension upgrade torynet/gh-issue-dependency"
          echo ""
          echo "‚úÖ Promoted from RC: ${{ needs.promote-to-release.outputs.rc_tag }}"

      - name: Notify release failure
        if: needs.create-production-release.result == 'failure'
        run: |
          echo "‚ùå Production release ${{ needs.promote-to-release.outputs.release_tag }} failed!"
          echo "RC tag: ${{ needs.promote-to-release.outputs.rc_tag }}"
          exit 1