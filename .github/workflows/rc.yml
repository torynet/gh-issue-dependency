name: RC

on:
  push:
    tags:
      - 'v*-rc*'  # Only RC tags
  workflow_dispatch:
    inputs:
      tag:
        description: 'RC tag to build (e.g., v1.2.0-rc1)'
        required: true

permissions:
  contents: write
  packages: write

jobs:
  build-rc:
    name: Build RC Artifacts
    runs-on: ubuntu-latest
    outputs:
      rc_tag: ${{ steps.version.outputs.rc_tag }}
      release_tag: ${{ steps.version.outputs.release_tag }}
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: 386
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: 386

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-1.21-${{ hashFiles('**/go.sum') }}

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            RC_TAG="${{ github.event.inputs.tag }}"
          else
            RC_TAG="${GITHUB_REF#refs/tags/}"
          fi
          
          # Validate RC tag format
          if [[ ! "$RC_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-rc[0-9]+$ ]]; then
            echo "❌ Invalid RC tag format: $RC_TAG"
            echo "Expected format: v1.2.3-rc1"
            exit 1
          fi
          
          # Convert RC tag to release tag (v1.2.0-rc1 -> v1.2.0)
          RELEASE_TAG=${RC_TAG%-rc*}
          
          echo "rc_tag=$RC_TAG" >> $GITHUB_OUTPUT
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "✅ Valid RC tag: $RC_TAG → Release: $RELEASE_TAG"

      - name: Build RC Binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          EXT=""
          if [ "${{ matrix.goos }}" = "windows" ]; then
            EXT=".exe"
          fi
          
          # Use proper GitHub CLI extension naming (without version number)
          BINARY_NAME="gh-issue-dependency-${{ matrix.goos }}-${{ matrix.goarch }}${EXT}"
          
          echo "Building $BINARY_NAME for RC ${{ steps.version.outputs.rc_tag }}..."
          go build \
            -ldflags "-s -w -X cmd.Version=${{ steps.version.outputs.rc_tag }} -X cmd.Commit=${GITHUB_SHA:0:8} -X cmd.BuildType=rc" \
            -o "dist/${BINARY_NAME}" \
            .
          
          # Create checksums
          cd dist
          sha256sum "${BINARY_NAME}" > "${BINARY_NAME}.sha256"

      - name: Upload RC artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rc-binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/

  create-prerelease:
    name: Create GitHub Pre-release
    needs: build-rc
    runs-on: ubuntu-latest
    outputs:
      rc_tag: ${{ needs.build-rc.outputs.rc_tag }}
      release_tag: ${{ needs.build-rc.outputs.release_tag }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all RC artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
          pattern: rc-binaries-*
          merge-multiple: true

      - name: Generate changelog
        id: changelog
        run: |
          RC_TAG="${{ needs.build-rc.outputs.rc_tag }}"
          
          # Generate changelog from commits since last release
          LATEST_RELEASE=$(git tag -l "v*" | grep -v "rc" | sort -V | tail -1)
          if [ -z "$LATEST_RELEASE" ]; then
            echo "## Changes" > release_notes.md
            echo "- Initial release candidate" >> release_notes.md
          else
            echo "## Changes since $LATEST_RELEASE" > release_notes.md
            git log --pretty=format:"- %s (%h)" ${LATEST_RELEASE}..HEAD >> release_notes.md
          fi
          
          # Add RC-specific info
          echo "" >> release_notes.md
          echo "## 🧪 Release Candidate Information" >> release_notes.md
          echo "" >> release_notes.md
          echo "This is a **release candidate** for testing purposes." >> release_notes.md
          echo "" >> release_notes.md
          echo "### GitHub CLI Extension Installation" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "# Install this RC for testing" >> release_notes.md
          echo "gh extension install torynet/gh-issue-dependency --pin $RC_TAG" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Testing Guidelines" >> release_notes.md
          echo "- ⚠️ **Not recommended for production use**" >> release_notes.md
          echo "- Please test thoroughly and report any issues" >> release_notes.md
          echo "- If testing is successful, this RC will be promoted to production release \`${{ needs.build-rc.outputs.release_tag }}\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "**Commit**: ${{ github.sha }}" >> release_notes.md
          echo "**Build**: ${{ github.run_id }}" >> release_notes.md

      - name: Create Pre-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build-rc.outputs.rc_tag }}
          name: Release Candidate ${{ needs.build-rc.outputs.rc_tag }}
          body_path: release_notes.md
          draft: false
          prerelease: true
          files: |
            dist/*
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify RC Created
        run: |
          echo "🚀 RC ${{ needs.build-rc.outputs.rc_tag }} created successfully!"
          echo "📦 Pre-release available at: https://github.com/${{ github.repository }}/releases/tag/${{ needs.build-rc.outputs.rc_tag }}"
          echo ""
          echo "🔧 GitHub CLI Extension Installation:"
          echo "gh extension install torynet/gh-issue-dependency --pin ${{ needs.build-rc.outputs.rc_tag }}"
          echo ""
          echo "✅ Ready for testing - if successful, promote to release ${{ needs.build-rc.outputs.release_tag }}"